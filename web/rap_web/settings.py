"""
Django settings for rap_web project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from typing import Any

from decouple import config as decouple_config


# Helper function to get boolean configuration values
def bool_config(key, default=False):
    return decouple_config(key, default=default, cast=bool)


def list_config(key, default="", separator=","):
    value = decouple_config(key, default=default)
    if isinstance(value, str):
        return [s.strip() for s in value.split(separator) if s.strip()]
    return []


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY", "changeme-generate-secure-key-for-production"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool_config("DJANGO_DEBUG", default=False)

# More restrictive allowed hosts
ALLOWED_HOSTS = list_config("DJANGO_ALLOWED_HOSTS", default="localhost,127.0.0.1")

# Proxy settings for reverse proxy (Nginx)
USE_X_FORWARDED_HOST = bool_config("USE_X_FORWARDED_HOST", default=False)
USE_X_FORWARDED_PORT = bool_config("USE_X_FORWARDED_PORT", default=False)

# Configure trusted proxy headers
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    # Trust proxy for CSRF - include all protocols
    CSRF_TRUSTED_ORIGINS = []
    for host in ALLOWED_HOSTS:
        if host not in ["*", ""]:
            CSRF_TRUSTED_ORIGINS.extend([f"http://{host}", f"https://{host}"])
else:
    # For development, allow localhost origins
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost",
        "https://localhost",
        "http://127.0.0.1",
        "https://127.0.0.1",
    ]

# Always add these trusted origins for testing
CSRF_TRUSTED_ORIGINS = getattr(locals(), "CSRF_TRUSTED_ORIGINS", []) + [
    "http://localhost",
    "https://localhost",
    "http://127.0.0.1",
    "https://127.0.0.1",
    "http://0.0.0.0",
    "https://0.0.0.0",
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Security apps
    "axes",  # Account lockout protection
    "corsheaders",  # CORS handling
    "csp",  # Content Security Policy
    # Celery apps
    "django_celery_beat",
    "django_celery_results",
    # Project apps
    "users",
    "events",
    "attendance",
    "notifications",
    "polls",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Static files security
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Must be before custom middleware that uses request.user
    # Custom security middleware (after authentication)
    "rap_web.security_middleware.SecurityHeadersMiddleware",  # Custom security headers
    "rap_web.security_middleware.SecurityLoggingMiddleware",  # Security logging
    "rap_web.security_middleware.BasicRateLimitMiddleware",  # Basic rate limiting
    "rap_web.security_middleware.AdminAccessControlMiddleware",  # Admin access control
    # Require login for all non-exempt pages
    "rap_web.middleware.LoginRequiredMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Will be enabled when packages are installed:
    "axes.middleware.AxesMiddleware",  # Account lockout
    "corsheaders.middleware.CorsMiddleware",  # CORS
    "csp.middleware.CSPMiddleware",  # Content Security Policy
]

ROOT_URLCONF = "rap_web.urls"

TEMPLATES: list[dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rap_web.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "rap_db"),
        "USER": os.environ.get("POSTGRES_USER", "rap_user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "rap_db_password"),
        "HOST": os.environ.get("POSTGRES_HOST", "db"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}

AUTH_USER_MODEL = "users.Player"

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "nl"

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_TZ = True

# Date and time formatting
DATE_FORMAT = "d/m/Y"
DATETIME_FORMAT = "d/m/Y H:i"
SHORT_DATE_FORMAT = "d/m/Y"
SHORT_DATETIME_FORMAT = "d/m/Y H:i"
TIME_FORMAT = "H:i"

# Input formats for forms
DATE_INPUT_FORMATS = [
    "%d/%m/%Y",  # dd/mm/yyyy
    "%d-%m-%Y",  # dd-mm-yyyy
    "%Y-%m-%d",  # yyyy-mm-dd (ISO format for compatibility)
]

DATETIME_INPUT_FORMATS = [
    "%d/%m/%Y %H:%M",  # dd/mm/yyyy hh:mm
    "%d/%m/%Y %H:%M:%S",  # dd/mm/yyyy hh:mm:ss
    "%d-%m-%Y %H:%M",  # dd-mm-yyyy hh:mm
    "%d-%m-%Y %H:%M:%S",  # dd-mm-yyyy hh:mm:ss
    "%Y-%m-%d %H:%M",  # yyyy-mm-dd hh:mm (ISO format for compatibility)
    "%Y-%m-%d %H:%M:%S",  # yyyy-mm-dd hh:mm:ss (ISO format for compatibility)
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # For production collectstatic

# WhiteNoise configuration for static files serving
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Static file versioning for cache busting
# Enable static file versioning (adds version parameters to static URLs)
STATIC_VERSIONING_ENABLED = bool_config("STATIC_VERSIONING_ENABLED", default=not DEBUG)

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Auth redirects
LOGIN_URL = "/users/login/"
LOGIN_REDIRECT_URL = "/events/"
LOGOUT_REDIRECT_URL = "/users/login/"

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Admin URL customization
ADMIN_URL = os.environ.get("ADMIN_URL", "admin/")

# Rate limiting settings
RATELIMIT_ENABLE = True

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {name} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "security": {
            "format": "{levelname} {asctime} {name} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": (
                "/app/logs/rap_web.log"
                if "/app" in str(BASE_DIR)
                else "/tmp/rap_web.log"
            ),
            "formatter": "verbose",
        },
        "security_file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": (
                "/app/logs/rap_security.log"
                if "/app" in str(BASE_DIR)
                else "/tmp/rap_security.log"
            ),
            "formatter": "security",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple" if DEBUG else "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"] if DEBUG else ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.security": {
            "handlers": ["console"] if DEBUG else ["security_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        "rap_web": {
            "handlers": ["console"] if DEBUG else ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
X_FRAME_OPTIONS = "DENY"

# HTTPS settings (for production)
SECURE_SSL_REDIRECT = bool_config("SECURE_SSL_REDIRECT", default=False)
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year in production
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG

# Cookie security
SESSION_COOKIE_SECURE = bool_config("SESSION_COOKIE_SECURE", default=not DEBUG)
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_NAME = "rap_sessionid"
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

CSRF_COOKIE_SECURE = bool_config("CSRF_COOKIE_SECURE", default=not DEBUG)
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_NAME = "rap_csrftoken"
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"  # Default, but being explicit

# File upload restrictions
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Session security
SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Enhanced password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        "OPTIONS": {
            "user_attributes": ("username", "email", "first_name", "last_name"),
            "max_similarity": 0.7,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Increased from default 8
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Enable basic rate limiting as fallback
ENABLE_BASIC_RATE_LIMITING = True


# Email configuration

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp-relay.brevo.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "true").lower() == "true"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")  # your Brevo SMTP login email
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")  # your Brevo SMTP key
DEFAULT_FROM_EMAIL = os.getenv(
    "DEFAULT_FROM_EMAIL"
)  # [email protected] on a verified domain
SERVER_EMAIL = os.getenv("SERVER_EMAIL", DEFAULT_FROM_EMAIL)
EMAIL_TIMEOUT = int(os.getenv("EMAIL_TIMEOUT", 30))

# Site URL for email links
SITE_URL = os.getenv("SITE_URL", "http://localhost:8000")

# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================

# Authentication backends (required for django-axes)
AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesStandaloneBackend",  # AxesStandaloneBackend should be first
    "django.contrib.auth.backends.ModelBackend",  # Default Django backend
]

# =============================================================================
# CELERY CONFIGURATION
# =============================================================================

# Redis configuration for Celery
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# Celery Configuration Options
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

# Celery accept content types
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# Celery timezone configuration
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery task configuration
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes

# Use django-celery-beat scheduler (tasks managed through Django admin)
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Optional: Set default schedule (will be created in admin if not exists)
CELERY_BEAT_SCHEDULE = {}
