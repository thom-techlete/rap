name: SV Rap 8 PR checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

concurrency:
  group: pr-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Django tests and quality checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_rap_web
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends postgresql-client libpq-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django system check
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: python manage.py check --deploy

      - name: Run Django migrations
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: python manage.py migrate

      - name: Run Django tests
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: python manage.py test --settings=rap_web.test_settings --verbosity=2

  build_check:
    name: Validate Docker build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Derive lowercase image id
        run: |
          REPO="${{ github.repository }}"
          OWNER="$(echo "$REPO" | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
          NAME="$(echo "$REPO" | cut -d/ -f2 | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_ID=${{ env.REGISTRY }}/${OWNER}/${NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=pr-${{ github.event.pull_request.number || 'local' }}" >> $GITHUB_ENV

      - name: Build image without pushing
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: false
          tags: ${{ env.IMAGE_ID }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
