name: SV Rap 8 CI/CD Pipeline

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '**.sh'
      - '.gitignore'
      - '.github/**'
      - 'scripts/**'
      - 'htmlcov/**'
      - '*.egg-info/**'
      - 'coverage.xml'
      - 'pyproject.toml'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
  workflow_dispatch:

permissions:
  contents: read        
  packages: write   

concurrency:
  group: prod-${{ github.event.pull_request.base.ref || github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Django Tests & Quality Checks
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_rap_web
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            postgresql-client \
            libpq-dev \
            build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django system check
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py check --deploy

      - name: Run Django migrations
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py migrate

      - name: Run Django tests
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py test --settings=rap_web.test_settings --verbosity=2

  build:
    name: Build and push image
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.tag.outputs.image-tag }}
      commit-sha: ${{ steps.tag.outputs.commit-sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Derive lowercase image id and tag
        id: tag
        run: |
          REPO="${{ github.repository }}"
          OWNER="$(echo "$REPO" | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
          NAME="$(echo "$REPO" | cut -d/ -f2 | tr '[:upper:]' '[:lower:]')"
          IMAGE_ID="${{ env.REGISTRY }}/${OWNER}/${NAME}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV
          echo "image-tag=sha-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Image will be tagged as: ${IMAGE_ID}:latest and ${IMAGE_ID}:sha-${SHORT_SHA}"

      - name: Log in to ghcr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_ID }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [test, build]
    environment:
      name: production
      url: https://rap8.nl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        env:
          NEW_IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          command_timeout: 20m
          envs: NEW_IMAGE_TAG
          script: |
            set -e
            echo "üöÄ Starting deployment for SV Rap 8..."
            echo "üì¶ New image tag: ${NEW_IMAGE_TAG}"
            
            # Navigate to project directory
            cd /home/rap/docker
            
            # Pull latest code
            git checkout main
            git fetch origin --prune
            git pull --ff-only
            
            # Function to test deployment with a specific tag
            test_deployment() {
              local tag="$1"
              echo "üß™ Testing deployment with tag: $tag"
              
              # Update IMAGE_TAG in .env.prod
              sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=$tag/" .env.prod
              
              # Pull the specific image
              if ! docker compose -f docker-compose.prod.yml pull web celery_worker celery_beat; then
                echo "‚ùå Failed to pull images for tag: $tag"
                return 1
              fi
              
              # Restart services
              if ! docker compose -f docker-compose.prod.yml up -d --no-deps web celery_worker celery_beat; then
                echo "‚ùå Failed to start services with tag: $tag"
                return 1
              fi
              
              # Wait a moment for services to initialize
              sleep 10
              
              # Check health of services
              local url="https://rap8.nl/health/"
              local max_attempts=30
              local sleep_sec=2
              local last_body=""
              
              echo "üîç Checking ${url} for status healthy"
              for i in $(seq 1 "$max_attempts"); do
                local body="$(curl -fsS --max-time 3 "$url" || true)"
                if [ -n "$body" ]; then
                  last_body="$body"
                  if printf '%s' "$body" | tr -d '[:space:]' | grep -q '"status":"healthy"'; then
                    echo "‚úÖ Service is healthy with tag: $tag"
                    return 0
                  fi
                fi
                printf '.'
                sleep "$sleep_sec"
                if [ "$i" -eq "$max_attempts" ]; then
                  echo
                  echo "‚ùå Health check failed after $((max_attempts*sleep_sec)) seconds with tag: $tag"
                  echo "Last response body:"
                  printf '%s\n' "${last_body:-<empty>}"
                  return 1
                fi
              done
            }
            
            # Read last successful deployment tag
            last_successful_tag="latest"
            if [ -f .last-successful-deployment ]; then
              last_successful_tag="$(cat .last-successful-deployment)"
              echo "üìã Last successful deployment tag: $last_successful_tag"
            else
              echo "üìã No previous successful deployment found, using 'latest'"
            fi
            
            # Try deployment with latest tag first
            if test_deployment "latest"; then
              echo "üéâ Deployment successful with latest tag!"
              # Update last successful deployment tag to the new one
              echo "$NEW_IMAGE_TAG" > .last-successful-deployment
              git add .last-successful-deployment
              git commit -m "Update last successful deployment to $NEW_IMAGE_TAG" || true
              git push origin main || echo "Warning: Could not push last successful deployment update"
            else
              echo "‚ùå Deployment failed with latest tag, attempting fallback..."
              
              # Try with last successful tag if it's different from latest
              if [ "$last_successful_tag" != "latest" ]; then
                echo "üîÑ Attempting rollback to last successful tag: $last_successful_tag"
                if test_deployment "$last_successful_tag"; then
                  echo "‚úÖ Rollback successful with tag: $last_successful_tag"
                  echo "‚ö†Ô∏è  Deployment completed using fallback. Latest changes were not deployed."
                else
                  echo "üí• Rollback also failed! Manual intervention required."
                  # Show recent logs to aid debugging
                  echo "Recent web logs:"
                  docker compose -f docker-compose.prod.yml logs --tail=200 web || true
                  exit 1
                fi
              else
                echo "üí• No fallback available (last successful was also 'latest'). Manual intervention required."
                # Show recent logs to aid debugging
                echo "Recent web logs:"
                docker compose -f docker-compose.prod.yml logs --tail=200 web || true
                exit 1
              fi
            fi

            # Clean up old images
            docker system prune -f
            
            echo "üèÅ Deployment process completed!"
            
      # - name: Rollback on failure
      #   if: failure()
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     port: ${{ secrets.DEPLOY_PORT || 22 }}
      #     script: |
      #       echo "üí• Deployment failed, attempting rollback..."
      #       cd ${{ secrets.DEPLOY_PATH || '/opt/rap' }}/docker
            
      #       # Get the previous successful commit
      #       PREV_COMMIT=$(git log --format="%H" -n 2 | tail -1)
      #       echo "Rolling back to commit: $PREV_COMMIT"
            
      #       # Checkout previous commit
      #       git checkout $PREV_COMMIT
            
      #       # Restart services with previous version
      #       docker-compose -f docker-compose.prod.yml up -d --force-recreate
            
      #       echo "üîÑ Rollback completed"

      # - name: Notify deployment status
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     fields: repo,message,commit,author,action,eventName,ref,workflow
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
