name: SV Rap 8 CI/CD Pipeline

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '**.sh'
      - '.gitignore'
      - '.github/**'
      - 'scripts/**'
      - 'htmlcov/**'
      - '*.egg-info/**'
      - 'coverage.xml'
      - 'pyproject.toml'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
  workflow_dispatch:

permissions:
  contents: read        
  packages: write   

concurrency:
  group: prod-${{ github.event.pull_request.base.ref || github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Django Tests & Quality Checks
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_rap_web
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            postgresql-client \
            libpq-dev \
            build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django system check
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py check --deploy

      - name: Run Django migrations
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py migrate

      - name: Run Django tests
        working-directory: ./web
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_rap_web
          POSTGRES_DB: test_rap_web
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci-pipeline
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py test --settings=rap_web.test_settings --verbosity=2

  build:
    name: Build and push image
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Derive lowercase image id
        run: |
          REPO="${{ github.repository }}"
          OWNER="$(echo "$REPO" | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
          NAME="$(echo "$REPO" | cut -d/ -f2 | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_ID=${{ env.REGISTRY }}/${OWNER}/${NAME}" >> $GITHUB_ENV

      - name: Log in to ghcr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_ID }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [test, build]
    environment:
      name: production
      url: https://rap8.nl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          command_timeout: 15m
          script: |
            set -e
            echo "üöÄ Starting deployment for SV Rap 8..."
            
            # Navigate to project directory
            cd /home/rap
            
            # Pull latest code
            git checkout main
            git fetch origin --prune
            git pull --ff-only
            
            # Pull latest Docker images
            cd /home/rap/docker
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml down --remove-orphans
            
            # Start services
            docker compose -f docker-compose.prod.yml up -d
            
            # Clean up old Docker images
            docker system prune -f
            
            echo "‚úÖ Deployment completed successfully!"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          HEALTH_URL="${{ secrets.PRODUCTION_URL }}/health/"
          max_attempts=6
          attempt=1
          sleep 30
          while [ $attempt -le $max_attempts ]; do
            response=$(curl -s "$HEALTH_URL" || echo "")
            status=$(echo "$response" | python3 -c "import sys, json; print(json.load(sys.stdin).get('status', 'unhealthy'))" 2>/dev/null)
            if [ "$status" = "healthy" ]; then
              echo "‚úÖ Health check passed! Application is running correctly."
              exit 0
            fi
            echo "Attempt $attempt/$max_attempts: status is '$status'. Retrying in 5s..."
            attempt=$((attempt+1))
            sleep 5
          done
          echo "‚ùå Health check failed after $max_attempts attempts."
          exit 1

      # - name: Rollback on failure
      #   if: failure()
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     port: ${{ secrets.DEPLOY_PORT || 22 }}
      #     script: |
      #       echo "üí• Deployment failed, attempting rollback..."
      #       cd ${{ secrets.DEPLOY_PATH || '/opt/rap' }}/docker
            
      #       # Get the previous successful commit
      #       PREV_COMMIT=$(git log --format="%H" -n 2 | tail -1)
      #       echo "Rolling back to commit: $PREV_COMMIT"
            
      #       # Checkout previous commit
      #       git checkout $PREV_COMMIT
            
      #       # Restart services with previous version
      #       docker-compose -f docker-compose.prod.yml up -d --force-recreate
            
      #       echo "üîÑ Rollback completed"

      # - name: Notify deployment status
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     fields: repo,message,commit,author,action,eventName,ref,workflow
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}