name: "Copilot Setup Steps"

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    # Run the job in a Python container so the agent inherits a single, fixed runtime
    container:
      image: python:3.12-bookworm

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rap_web
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d rap_web"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system packages needed for psycopg and psql
        run: |
          apt-get update
          apt-get install -y --no-install-recommends postgresql-client libpq-dev build-essential gettext

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Wait for Postgres
        env:
          PGPASSWORD: postgres
        run: |
          for i in $(seq 1 30); do
            pg_isready -h localhost -p 5432 -U postgres -d rap_web && exit 0
            sleep 2
          done
          echo "Postgres not ready in time" >&2
          exit 1

      - name: Django checks and migrations
        working-directory: ./web
        env:
          # These are for the setup steps only.
          # The agent will get its env from the repository environment named 'copilot'.
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/rap_web
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: copilot-development-secret-key
          DJANGO_DEBUG: "True"
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py check
          python manage.py migrate --noinput

      - name: Verify Celery config
        working-directory: ./web
        env:
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
        run: |
          timeout 5s celery -A rap_web worker --loglevel=info --dry-run || true

      - name: Environment summary
        run: |
          python --version
          psql --version
          echo "DB: postgres://postgres:***@localhost:5432/rap_web"
          echo "Redis: redis://localhost:6379/0"
