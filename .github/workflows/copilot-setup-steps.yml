name: "Copilot Setup Steps"

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    # Run the job in a Python container so the agent inherits a single, fixed runtime
    container:
      image: python:3.12-bookworm

    services:
      db:
        image: postgres:17
        env:
          POSTGRES_USER: rap_user
          POSTGRES_PASSWORD: rap_db_password
          POSTGRES_DB: rap_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U rap_user -d rap_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system packages needed for psycopg and psql
        run: |
          apt-get update
          apt-get install -y --no-install-recommends postgresql-client libpq-dev build-essential gettext

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: wait for db
        env:
          PGPASSWORD: rap_db_password
        run: |
          for i in $(seq 1 60); do
            pg_isready -h db -p 5432 -U rap_user -d rap_db && exit 0
            sleep 2
          done
          echo "Database not ready in time" >&2
          exit 1
        
      - name: verify database auth
        env:
          PGPASSWORD: rap_db_password
        run: |
          psql "host=db port=5432 user=rap_user dbname=rap_db" -c "select version();"

      - name: Django checks and migrations
        working-directory: ./web
        env:
            DATABASE_URL: postgres://rap_user:rap_db_password@db:5432/rap_db
            REDIS_URL: redis://redis:6379/0
            DJANGO_SECRET_KEY: copilot-development-secret-key
            DJANGO_DEBUG: "True"
            DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py check
          python manage.py migrate --noinput

      - name: verify celery config
        working-directory: ./web
        env:
          REDIS_URL: redis://redis:6379/0
          CELERY_BROKER_URL: redis://redis:6379/0
          CELERY_RESULT_BACKEND: redis://redis:6379/0
        run: |
          timeout 5s celery -A rap_web worker --loglevel=info --dry-run || true

      - name: environment summary
        run: |
          python --version
          psql --version
          echo "DB: postgres://rap_user:***@db:5432/rap_db"
          echo "Redis: redis://redis:6379/0"

      - name: postgres logs on failure
        if: failure()
        run: |
          docker ps --format '{{.ID}} {{.Image}}' | grep 'postgres:17' | awk '{print $1}' | xargs -r -n1 docker logs --tail 200
