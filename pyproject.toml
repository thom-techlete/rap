[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-basic-template"
version = "0.1.0"
description = "A basic Python project template with full DevOps tooling support."
readme = "README.md"
requires-python = ">=3.12,<4.0"
keywords = ["devops", "template", "python"]
license = {text = "MIT"}
authors = [
    {name = "Thom Ezechiels", email = "thom@techletes.ai"},
]
maintainers = [
  { name = "Techletes DevOps Team", email = "dev@techletes.ai" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

# Add project dependencies here. pip-tools will read them from here, do not use a requirements file!
dependencies = [
  "django",
  "psycopg2-binary",
  "celery",
  "redis",
  "django-celery-beat",
  "django-celery-results",
  "gunicorn",
  "python-dotenv",
  "djangorestframework",
  "whitenoise",
  "django-anymail",
  "django-environ",
  "pillow",
  # Security packages
  "django-ratelimit>=4.1.0",
  "django-csp>=3.8",
  "python-decouple>=3.8",
  "django-cors-headers>=4.3.1",
  "django-extensions>=3.2.3",
  "django-axes>=6.1.1",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "detect-secrets", 
    "nbstripout",
    "pytest>=7.0",
    "pytest-cov",
    "black",
    "ruff",
    "beartype",
    "pytest-beartype",
    "pip-audit>=2.9.0",
    "pip-tools",  # for managing requirement*.txt
]

[project.urls]
Homepage = "https://github.com/TECHLETES/python_basic_template"
Repository = "https://github.com/TECHLETES/python_basic_template"
Issues = "https://github.com/TECHLETES/python_basic_template/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["utils*", "example*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=utils",
    "--cov=example",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--beartype-packages=utils,example",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]

[tool.coverage.run]
source = ["utils", "example"]
omit = [
    "*/__pycache__/*",
    "*/tests/*",
    "*/example/*",
    "*/.venv/*",
    "*/venv/*",
    "*/__init__.py",
    "setup.py",
    # Add any other files you want to exclude from test coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError",
    "pass",
]

[tool.mypy]
python_version = "3.12"
strict = true
ignore_missing_imports = true
show_error_codes = true
warn_unused_ignores = true
show_column_numbers = true
pretty = true
exclude = [
  "migrations",  # if Django/SQLAlchemy used
  "notebooks",   # if you sync with Jupytext
]
plugins = []

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
respect-gitignore = true
extend-exclude = ["migrations"]

# Enable popular rule sets
lint.select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "B",  # bugbear
  "UP", # pyupgrade
]

# Rules to ignore (common ones)
lint.ignore = [
  "B008",  # Do not perform function calls in argument defaults
  "E501",  # Line too long (Black handles this)
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101", "B601"]
