# Load env vars from docker/.env if present
if [ -f docker/.env ]; then
  set -a
  source docker/.env
  set +a
fi

# Load env vars from docker/.env.prod if present
if [ -f docker/.env.email ]; then
  set -a
  source docker/.env.email
  set +a
fi

export PYTHONPATH=.
export VENV_DIR="venv"
export PROD_LOCK="requirements.txt"
export DEV_LOCK="requirements-dev.txt"
export PYPROJECT="pyproject.toml"

# Activate venv if present
if [ -d "$VENV_DIR" ]; then
  source "$VENV_DIR/bin/activate"
fi

# Reuse or start a single ssh-agent and persist its env
agent_env="$HOME/.ssh/agent_env"

ensure_agent() {
  if [ -n "${SSH_AUTH_SOCK:-}" ] && [ -S "$SSH_AUTH_SOCK" ]; then
    return
  fi
  if [ -f "$agent_env" ]; then
    # shellcheck disable=SC1090
    source "$agent_env"
  fi
  if [ -z "${SSH_AUTH_SOCK:-}" ] || [ ! -S "$SSH_AUTH_SOCK" ]; then
    eval "$(ssh-agent -s)" >/dev/null
    printf 'export SSH_AUTH_SOCK=%q\n' "$SSH_AUTH_SOCK" > "$agent_env"
    printf 'export SSH_AGENT_PID=%q\n' "$SSH_AGENT_PID" >> "$agent_env"
    chmod 600 "$agent_env"
  fi
}

ensure_agent

# Add the key only if missing, never block
key_file="$HOME/.ssh/github_ed25519"
if [ -f "$key_file" ]; then
  fp="$(ssh-keygen -lf "$key_file" | awk '{print $2}')"
  if ! ssh-add -l 2>/dev/null | grep -q "$fp"; then
    # Try to add without blocking. If a passphrase is required, bail out quickly.
    if command -v timeout >/dev/null 2>&1; then
      timeout 2s ssh-add "$key_file" </dev/null >/dev/null 2>&1 || true
    else
      SSH_ASKPASS=/bin/false SSH_ASKPASS_REQUIRE=prefer setsid -w ssh-add "$key_file" </dev/null >/dev/null 2>&1 || true
    fi
  fi
fi
